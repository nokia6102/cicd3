name: "Build iOS app"

on:
  # 允許手動從 GitHub 的 run 這個 workflow
  workflow_dispatch:
    branches: [main]
  # github action 的排程不一定會準時，目前實測排程都會延遲一個小時左右
  # 詳細 schedule 設定請見：https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#schedule
  schedule:
    - cron: '30 0 * * 1-5' # 每週一至週五 AM 8:30 排程觸發 (這裡的時間是UTC, 所以台灣時區要+8)

# 取消當前工作流程中正在進行的jobs或runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: Check Xcode version
        run: xcodebuild -version

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build archive
        run: |
          xcodebuild -scheme "I am Groot" \
          -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive

      - name: Check Provisioning Profile existence
        run: |
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision  # Ensure this path matches the path used in decoding
          if [ ! -f $PP_PATH ]; then
            echo "Provisioning profile does not exist, check secrets or profile path."
            exit 1
          else
            echo "Provisioning profile exists."
          fi
        shell: /bin/bash -e {0}
        
      - name: Export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive \
                     -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
                     -exportOptionsPlist $EXPORT_OPTS_PATH \
                     -exportPath $RUNNER_TEMP/build \
                     PROVISIONING_PROFILE_SPECIFIER="com.andrewhoog.I-am-Groot0710"

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/I am Groot.ipa
          retention-days: 3

  slackNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [ build ]
    if: always() # 一律執行，不然前面的 job 失敗，後面的 job 都會被略過
    steps:
      - uses: actions/checkout@v4
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: SlackBotTestChannel
          SLACK_COLOR: "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}"
          SLACK_LINK_NAMES: true
          SLACK_TITLE: 'Build status'
          SLACK_MESSAGE: "Build ${{ contains(needs.*.result, 'failure') && 'error' || 'completion' }}"
          SLACK_USERNAME: "SH2.0 iOS : weekly build"